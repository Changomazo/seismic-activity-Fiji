getwd
getwd()
ls
ls()
dir()
list.files()
install.packages(¨swirl¨"swirl´)
install.packages(¨swirl¨)
install.packages("swirl")
swirl()
library(swirl)
library("swirl")
installed.packages()
library("swirl")
q()
g1 <- qplot(mpg, am, data = mtcars)
library(ggplot2)
library(ggplot2)
library(gridExtra)
g1 <- qplot(mpg, am, data = mtcars)
g1
qplot(factor(am), mpg, data = mtcars, geom = "boxplot", colour = gear)
qplot(mpg, am, data = mtcars, size = gear)
data(mtcars)
View(mtcars)
g4 <- qplot(am, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=am, main="Mileage by Transmission",
xlab="", ylab="Miles per Gallon")
g4
g4 <- qplot(am, mpg, data=mtcars, geom=c("boxplot", "jitter"),
main="Mileage by Transmission",
xlab="0 = automatic, 1 = manual", ylab="Miles per Gallon")
g4
g4 <- qplot(factor(am), mpg, data=mtcars, geom=c("boxplot", "jitter"),
main="Mileage by Transmission",
xlab="0 = automatic, 1 = manual", ylab="Miles per Gallon")
g4
g4 <- qplot(factor(am), mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill = am, main="Mileage by Transmission",
xlab="0 = automatic, 1 = manual", ylab="Miles per Gallon")
g4
g1
g1 <- qplot(mpg, am, data = mtcars, main = "Mileage by transmission", xlab = "Miles per Gallon",
ylab = "0 = automatic, 1 = manual")
g1
grid.arrange(g4, g1, ncol = 2, nrow = 1)
g4 <- qplot(factor(am), mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill = am, guides = FALSE, main="Mileage by Transmission",
xlab="0 = automatic, 1 = manual", ylab="Miles per Gallon")
g4 <- qplot(factor(am), mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill = am, guides(fill = FALSE), main="Mileage by Transmission",
xlab="0 = automatic, 1 = manual", ylab="Miles per Gallon")
g4 <- qplot(factor(am), mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill = am, guides(fill = FALSE), main="Mileage by Transmission",
xlab="0 = automatic, 1 = manual", ylab="Miles per Gallon")
g1 <- qplot(mpg, am, data = mtcars, main = "Mileage by transmission", xlab = "Miles per Gallon",
ylab = "0 = automatic, 1 = manual")
g4 <- qplot(factor(am), mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill = am, main="Mileage by Transmission",
xlab="0 = automatic, 1 = manual", ylab="Miles per Gallon")
grid.arrange(g4, g1, ncol = 2, nrow = 1)
manual <- mtcars[mtcars$am == 1]$mpg
auto <- mtcars[mtcars$am == 0]$mpg
manual <- mtcars[mtcars$am == "1"]$mpg
auto <- mtcars[mtcars$am == "0"]$mpg
manual <- mtcars[mtcars$am == "1",]$mpg
auto <- mtcars[mtcars$am == "0",]$mpg
t.test(manual, auto, alternative = "greater")
mean(manual)
mean(auto)
#grouping the data and t-test
manual <- mtcars[mtcars$am == "1",]$mpg
auto <- mtcars[mtcars$am == "0",]$mpg
t.test(manual, auto, alternative = "greater")$p.value
t.test(manual, auto, alternative = "greater")$conf.int
table(mean(auto), mean(manual))
matrix(mean(auto), mean(manual))
matrix(c(mean(auto), mean(manual))
)
matrix(c(mean(auto), mean(manual))) -> tab
colnames(tab) -> "Transmission Type"
rownames(tab) -> c("auto", "manual")
rownames(tab) <- c("auto", "manual")
tab
colnames(tab) <- "Transmission Type"
tab
g3bis <- qplot(mpg, am, data = mtcars, size = cyl)
g3bis
g3bis2 <- qplot(mpg, am, data = mtcars, size = carb)
g3bis2
g3bis <- qplot(mpg, am, data = mtcars, size = cyl, xlab = "Miles per Gallon",
ylab="0 = automatic, 1 = manual", main = "Number of cylinders effect on mpg")
g3bis2 <- qplot(mpg, am, data = mtcars, size = carb, main = "Number of cylinders effect on mpg",
xlab = "Miles per Gallon", ylab="0 = automatic, 1 = manual")
grid.arrange(g3bis, g3bis2, ncol = 2, nrow = 1)
g3bis <- qplot(am, mpg, data = mtcars, size = cyl, xlab = "Miles per Gallon",
ylab="0 = automatic, 1 = manual", main = "Number of cylinders effect on mpg")
g3bis2 <- qplot(am, mpg, data = mtcars, size = carb, main = "Number of cylinders effect on mpg",
xlab = "Miles per Gallon", ylab="0 = automatic, 1 = manual")
grid.arrange(g3bis, g3bis2, ncol = 2, nrow = 1)
g1 <- qplot(mpg, am, data = mtcars, main = "Mileage by transmission", xlab = "Miles per Gallon",
ylab = "0 = automatic, 1 = manual")
g4 <- qplot(factor(am), mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill = am, main="Mileage by Transmission",
xlab="0 = automatic, 1 = manual", ylab="Miles per Gallon")
grid.arrange(g4, g1, ncol = 2, nrow = 1)
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c("Automatic", "Manual")
g1 <- qplot(mpg, am, data = mtcars, main = "Mileage by transmission", xlab = "Miles per Gallon",
ylab = "0 = automatic, 1 = manual")
g4 <- qplot(mpg, factor(am), data=mtcars, geom=c("boxplot", "jitter"),
fill = am, main="Mileage by Transmission",
xlab="0 = automatic, 1 = manual", ylab="Miles per Gallon")
grid.arrange(g4, g1, ncol = 2, nrow = 1)
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c("Automatic", "Manual")
g1 <- qplot(mpg, am, data = mtcars, main = "Mileage by transmission", xlab = "Miles per Gallon")
g4 <- qplot(mpg, factor(am), data=mtcars, geom=c("boxplot", "jitter"),
fill = am, main="Mileage by Transmission",
xlab="0 = automatic, 1 = manual", ylab="Miles per Gallon")
grid.arrange(g4, g1, ncol = 2, nrow = 1)
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c("Automatic", "Manual")
g1 <- qplot(mpg, am, data = mtcars, main = "Mileage by transmission", xlab = "Miles per Gallon",
ylab = "0 = automatic, 1 = manual")
g4 <- qplot(mpg, factor(am), data=mtcars, geom=c("boxplot", "jitter"),
fill = am, main="Mileage by Transmission",
xlab="0 = automatic, 1 = manual", ylab="Miles per Gallon")
grid.arrange(g4, g1, ncol = 2, nrow = 1)
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c("Automatic", "Manual")
g1 <- qplot(mpg, am, data = mtcars, main = "Mileage by transmission", xlab = "Miles per Gallon", ylab = "")
g4 <- qplot(mpg, factor(am), data=mtcars, geom=c("boxplot", "jitter"),
fill = am, main="Mileage by Transmission",
xlab="0 = automatic, 1 = manual", ylab="Miles per Gallon")
grid.arrange(g4, g1, ncol = 2, nrow = 1)
g1 <- qplot(mpg, am, data = mtcars, main = "Mileage by transmission", xlab = "Miles per Gallon",
ylab = "0 = automatic, 1 = manual")
g4 <- qplot(mpg, factor(am), data=mtcars, geom=c("boxplot", "jitter"),
fill = am, main="Mileage by Transmission",
xlab="0 = automatic, 1 = manual", ylab="Miles per Gallon")
grid.arrange(g4, g1, ncol = 2, nrow = 1)
g1 <- qplot(mpg, am, data = mtcars, main = "Mileage by transmission", xlab = "Miles per Gallon",
ylab = "0 = automatic, 1 = manual")
g4 <- qplot(mpg, factor(am), data=mtcars, geom=c("boxplot", "jitter"),
fill = am, main="Mileage by Transmission",
xlab="0 = automatic, 1 = manual", ylab="Miles per Gallon")
grid.arrange(g4, g1, ncol = 2, nrow = 1)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = .75, list = FALSE)
training <- segmentationOriginal[inTrain, ]
test <- segmentationOriginal[-inTrain, ]
dim(training); dim(test)
set.seed(125)
library(rpart)
modFit <- train(Case ~ ., method = "rpart", data = segmentationOriginal)
modFit <- train(Case ~ ., method = "rpart", data = training)
modFit$finalModel
install.packages("rattle")
library(rattlr)
library(rattle)
plot(modFit$finalModel, uniform = TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = .75, list = FALSE)
training <- segmentationOriginal[inTrain, ]
test <- segmentationOriginal[-inTrain, ]
library(rpart)
modFit <- train(Case ~ ., method = "rpart", data = training)
library("rattle")
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
View(training)
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
newdata[1, c(103, 50, 85)] <- c(23000, 10, 2)
View(training)
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
modFit <- train(Case ~ ., method = "rpart", data = training)
training<- segmentationOriginal[segmentationOriginal$Case=="Train",][, -2]
modFit <- train(Case ~ ., method = "rpart", data = training)
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
modFit <- train(Class ~ ., method = "rpart", data = training)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
Olivetrain <- createDataPartition(y = olive$Area, p = .75, list = FALSE)
trainingoliv <- olive[Olivetrain, ]
testoliv <- olive[-Olivetrain, ]
View(testoliv)
olivFit <- train(Area ~., method = "rpart", data = trainingoliv)
newdata = as.data.frame(t(colMeans(olive)))
predict(olivFit, newdata = newdata)
ibrary(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(testSA)
View(trainSA)
heartmod <- train(chd ~ age + alcohol + obesity + tobacco + typea + Ldl, method = "glm family = "binomial")
heartmod <- train(chd ~ age + alcohol + obesity + tobacco + typea + Ldl, method = "glm", family = "binomial")
heartmod <- train(chd ~ age + alcohol + obesity + tobacco + typea + Ldl, method = "glm", family = "binomial", data = trainSA)
names(trainSA)
heartmod <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(heartmod))
missClass(testSA$chd, predict(heartmod, testSA))
data(vowel.train)
data(vowel.test)
data(vowel.train)
data(vowel.test)
View(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train <- as.factor(vowel)
vowel.train <- as.factor(vowel.train$y)
set.seed(33833)
install.packages("randomForest")
library(randomForest)
?randomForest
vowelFit <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
data(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowelFit <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
varImp(vowelFit)
vowelFit2 <- randomForest(y ~ ., data = vowel.train)
varImp(vowelFit2)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
heartmod <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)} #gibven in the answer by the instructors
missClass(trainSA$chd, predict(heartmod))
missClass(testSA$chd, predict(heartmod, testSA))
install.packages("checkpoint")
library(checkpoint)
checkpoint("2015-07-01")
setwd("~/Documents/Data Analysis Course 2016/Week 35 R packages")
?package.skeleton
