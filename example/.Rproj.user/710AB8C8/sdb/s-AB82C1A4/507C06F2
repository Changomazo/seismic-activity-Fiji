{
    "collab_server" : "",
    "contents" : "---\ntitle       : Building R Packages\nsubtitle    : \nauthor      : Roger D. Peng, Associate Professor of Biostatistics\njob         : Johns Hopkins Bloomberg School of Public Health\nlogo        : bloomberg_shield.png\nframework   : io2012        # {io2012, html5slides, shower, dzslides, ...}\nhighlighter : highlight.js  # {highlight.js, prettify, highlight}\nhitheme     : tomorrow      # \nurl:\n  lib: ../../librariesNew\n  assets: ../../assets\nwidgets     : [mathjax]            # {mathjax, quiz, bootstrap}\nmode        : selfcontained # {standalone, draft}\n---\n\n## What is an R Package?\n\n- A mechanism for extending the basic functionality of R\n- A collection of R functions, or other (data) objects\n- Organized in a systematic fashion to provide a minimal amount of consistency\n- Written by users/developers everywhere\n\n---\n\n## Where are These R Packages?\n\n- Primarily available from CRAN and Bioconductor\n\n- Also available from GitHub, Bitbucket, Gitorious, etc. (and elsewhere)\n\n- Packages from CRAN/Bioconductor can be installed with `install.packages()`\n\n- Packages from GitHub can be installed using `install_github()` from\n  the <b>devtools</b> package\n\nYou do not have to put a package on a central repository, but doing so\nmakes it easier for others to install your package.\n\n---\n\n## What's the Point?\n\n- \"Why not just make some code available?\"\n- Documentation / vignettes\n- Centralized resources like CRAN\n- Minimal standards for reliability and robustness\n- Maintainability / extension\n- Interface definition / clear API\n- Users know that it will at least load properly\n\n---\n\n## Package Development Process\n\n- Write some code in an R script file (.R)\n- Want to make code available to others\n- Incorporate R script file into R package structure\n- Write documentation for user functions\n- Include some other material (examples, demos, datasets, tutorials)\n- Package it up!\n\n---\n\n## Package Development Process\n\n- Submit package to CRAN or Bioconductor\n- Push source code repository to GitHub or other source code sharing web site\n- People find all kinds of problems with your code\n  - Scenario #1: They tell you about those problems and expect you to fix it\n  - Scenario #2: They fix the problem for you and show you the changes\n- You incorporate the changes and release a new version\n\n---\n\n## R Package Essentials\n\n- An R package is started by creating a directory with the name of the R package\n- A DESCRIPTION file which has info about the package\n- R code! (in the R/ sub-directory)\n- Documentation (in the man/ sub-directory)\n- NAMESPACE (optional, but do it)\n- Full requirements in Writing R Extensions\n\n---\n\n## The DESCRIPTION File\n\n- <b>Package</b>: Name of package (e.g. library(name))\n- <b>Title</b>: Full name of package\n- <b>Description</b>: Longer description of package in one sentence (usually)\n- <b>Version</b>: Version number (usually M.m-p format)\n- <b>Author</b>, <b>Authors@R</b>: Name of the original author(s)\n- <b>Maintainer</b>: Name + email of person who fixes problems\n- <b>License</b>: License for the source code\n\n---\n\n## The DESCRIPTION File\n\nThese fields are optional but commonly used\n\n- <b>Depends</b>: R packages that your package depends on\n- <b>Suggests</b>: Optional R packages that users may want to have installed\n- <b>Date</b>: Release date in YYYY-MM-DD format\n- <b>URL</b>: Package home page\n- <b>Other</b> fields can be added\n\n---\n\n## DESCRIPTION File: `gpclib`\n\n<b>Package</b>:  gpclib<br />\n<b>Title</b>:  General Polygon Clipping Library for R<br />\n<b>Description</b>:  General polygon clipping routines for R based on Alan Murta's C library<br />\n<b>Version</b>:  1.5-5<br />\n<b>Author</b>:  Roger D. Peng <rpeng@jhsph.edu> with contributions from Duncan Murdoch and Barry Rowlingson; GPC library by Alan Murta<br />\n<b>Maintainer</b>:  Roger D. Peng <rpeng@jhsph.edu><br />\n<b>License</b>:  file LICENSE<br />\n<b>Depends</b>:  R (>= 2.14.0), methods<br />\n<b>Imports</b>:  graphics<br />\n<b>Date</b>:  2013-04-01<br />\n<b>URL</b>:  http://www.cs.man.ac.uk/~toby/gpc/, http://github.com/rdpeng/gpclib\n\n---\n\n## R Code\n\n- Copy R code into the R/ sub-directory\n- There can be any number of files in this directory\n- Usually separate out files into logical groups\n- Code for all functions should be included here and not anywhere else in the package\n\n---\n\n## The NAMESPACE File\n\n- Used to indicate which functions are <b>exported</b>\n- Exported functions can be called by the user and are considered the public API\n- Non-exported functions cannot be called directly by the user (but the code can be viewed)\n- Hides implementation details from users and makes a cleaner package interface\n\n---\n\n## The NAMESPACE File\n\n- You can also indicate what functions you <b>import</b> from other packages\n- This allows for your package to use other packages without making other packages visible to the user\n- Importing a function loads the package but does not attach it to the search list\n\n---\n\n## The NAMESPACE File\n\nKey directives\n- export(\"\\<function>\") \n- import(\"\\<package>\")\n- importFrom(\"\\<package>\", \"\\<function>\")\n\nAlso important\n- exportClasses(\"\\<class>\")\n- exportMethods(\"\\<generic>\")\n\n---\n\n## NAMESPACE File: `mvtsplot` package\n\n```r\nexport(\"mvtsplot\")\nimportFrom(graphics, \"Axis\")\nimport(splines)\n```\n\n---\n\n## NAMESPACE File: `gpclib` package\n\n```r\nexport(\"read.polyfile\", \"write.polyfile\")\n\nimportFrom(graphics, plot)\n\nexportClasses(\"gpc.poly\", \"gpc.poly.nohole\")\n\nexportMethods(\"show\", \"get.bbox\", \"plot\", \"intersect\", \"union\", \"setdiff\", \n              \"[\", \"append.poly\", \"scale.poly\", \"area.poly\", \"get.pts\", \n              \"coerce\", \"tristrip\", \"triangulate\")\n```\n\n---\n\n## Documentation\n\n- Documentation files (.Rd) placed in man/ sub-directory\n- Written in a specific markup language\n- Required for every exported function\n  - Another reason to limit exported functions\n- You can document other things like concepts, package overview\n\n---\n\n## Help File Example: `line` Function\n\n```\n\\name{line}\n\\alias{line}\n\\alias{residuals.tukeyline}\n\\title{Robust Line Fitting}\n\\description{\n  Fit a line robustly as recommended in \\emph{Exploratory Data Analysis}.\n}\n```\n\n---\n\n## Help File Example: `line` Function\n\n```\n\\usage{\nline(x, y)\n}\n\\arguments{\n  \\item{x, y}{the arguments can be any way of specifying x-y pairs.  See\n    \\code{\\link{xy.coords}}.}\n}\n```\n\n---\n\n## Help File Example: `line` Function\n\n```\n\\details{\n  Cases with missing values are omitted.\n\n  Long vectors are not supported.\n}\n\\value{\n  An object of class \\code{\"tukeyline\"}.\n\n  Methods are available for the generic functions \\code{coef},\n  \\code{residuals}, \\code{fitted}, and \\code{print}.\n}\n```\n\n---\n\n## Help File Example: `line` Function\n\n```\n\\references{\n  Tukey, J. W. (1977).\n  \\emph{Exploratory Data Analysis},\n  Reading Massachusetts: Addison-Wesley.\n}\n```\n\n---\n\n## Building and Checking\n\n- R CMD build is a command-line program that creates a package archive\n  file (`.tar.gz`)\n\n- R CMD check runs a battery of tests on the package\n\n- You can run R CMD build or R CMD check from the command-line using a\n  terminal or command-shell application\n\n- You can also run them from R using the system() function\n\n```r\nsystem(\"R CMD build newpackage\")\nsystem(\"R CMD check newpackage\")\n```\n\n---\n\n## Checking\n\n- R CMD check runs a battery tests\n- Documentation exists\n- Code can be loaded, no major coding problems or errors\n- Run examples in documentation\n- Check docs match code\n- All tests must pass to put package on CRAN\n\n\n---\n\n## Getting Started\n\n- The `package.skeleton()` function in the utils package creates a \"skeleton\" R package\n- Directory structure (R/, man/), DESCRIPTION file, NAMESPACE file, documentation files\n- If there are functions visible in your workspace, it writes R code files to the R/ directory\n- Documentation stubs are created in man/\n- You need to fill in the rest!\n\n---\n\n## Summary\n\n- R packages provide a systematic way to make R code available to others\n- Standards ensure that packages have a minimal amount of documentation and robustness\n- Obtained from CRAN, Bioconductor, Github, etc.\n\n---\n\n## Summary\n\n- Create a new directory with R/ and man/ sub-directories (or just use package.skeleton())\n- Write a DESCRIPTION file\n- Copy R code into the R/ sub-directory\n- Write documentation files in man/ sub-directory\n- Write a NAMESPACE file with exports/imports\n- Build and check\n\n",
    "created" : 1485180476217.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "21020916",
    "id" : "507C06F2",
    "lastKnownWriteTime" : 1485177027,
    "last_content_update" : 1485177027,
    "path" : "~/Documents/Data Analysis Course 2016/Week 35 R packages/Rpackages.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}